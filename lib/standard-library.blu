(define (even? n)
  (== (% n 2) 0))

(define (filter pred seq)
  (reduce (lambda (x y) (if (pred x) (cons x y) y))
          (quote ())
          seq))

(defmacro (if condition consequent alternative)
  `(cond (,condition ,consequent)
         (else ,alternative)))

(defmacro (let bindings body)
  `((lambda ,(map (lambda (binding) (first binding)) bindings)
      ,body)
    ,@(map (lambda (binding) (first (rest binding))) bindings)))

(define (load filename)
  (map (lambda (sexp) (eval sexp))
       (read (slurp-file filename))))

(define (map f seq)
  (if (null? seq)
      (quote ())
      (cons (f (first seq))
            (map f (rest seq)))))

(define (null? exp)
  (== exp (quote ())))

(define (odd? n)
  (== (% n 2) 1))

(define (reduce f acc seq)
  (if (null? seq)
      acc
      (reduce f
              (f (first seq) acc)
              (rest seq))))
