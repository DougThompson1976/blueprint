(load "test-framework.blu")

(deftest
  "and returns true if all arguments are truthy"
  '(assert-equal (and 1 true "foo")
                 true))

(deftest
  "and returns false if any arguments are falsy"
  '(assert-equal (and 1 false "foo")
                 false))

(deftest
  "even? returns true if a number is even"
  '(assert-equal (even? 4)
                 true))

(deftest
  "even? returns false if a number is odd"
  '(assert-equal
            (even? 5)
            false))

(deftest
  "filter can select elements of a list that match a predicate"
  '(assert-equal
    (filter (lambda (x) (== x 3)) '(1 3 4 5 2 3 3 5))
    '(3 3 3)))

(deftest
  "if expands into the equivalent cond expression"
  '(assert-equal (if (== 1 2)
                     3
                     4)
                 4))

(deftest
  "if doesn't inadvertently execute the alternative branch"
  '(assert-equal
    (let ((a 3))
      (if (== 1 2)
          (set! a 4)
          a))
    3))

(deftest
  "last returns the last element in a list"
  '(assert-equal (last '(1 2 3 4 5))
                 5))

(deftest
  "last returns the empty list if the list is empty"
  '(assert-equal (last '())
                 '()))

(deftest
  "let expands into an equivalent lambda expression"
  '(assert-equal (let ((x 3) (y 4))
                   (+ x y))
                 7))

(deftest
  "let* evaluates bindings sequentially"
  '(assert-equal (let* ((a 2)
                        (b (+ a 1))
                        (c (+ a b)))
                   c)
                 5))

(deftest
  "map maps a function across a list"
  '(assert-equal (map (lambda (n) (+ 1 n))
                      '(1 2 3))
                 '(2 3 4)))

(deftest
  "map returns an empty list when given one"
  '(assert-equal (map (lambda (n) (+ 1 n))
                      '())
                 '()))

(deftest
  "not flips the result of a statement"
  '(assert-equal (not false)
                 true))

(deftest
  "not flips the result of a statement"
  '(assert-equal (not true)
                 false))

(deftest
  "null? returns true when its argument is the empty list"
  '(assert-equal (null? '())
                 true))

(deftest
  "null? returns false when its argument isn't empty"
  '(assert-equal (null? '(1 2))
                 false))

(deftest
  "odd? returns true if a number is odd"
  '(assert-equal (odd? 5)
                 true))

(deftest
  "odd? returns false if a number is even"
  '(assert-equal (odd? 4)
                 false))

(deftest
  "or returns true if any arguments are truthy"
  '(assert-equal (and 1 false "foo")
                 false))

(deftest
  "or returns false if all arguments are falsy"
  '(assert-equal (or false false 2)
                 true))

(deftest
  "prog evaluates multiple statements, returning the last"
  '(assert-equal (prog
                  (define x 2)
                  (set! x 3)
                  (set! x (* x x))
                  x)
                 9))

(deftest
  "reduce can sum up a list of numbers"
  '(assert-equal (reduce (lambda (x y) (+ x y))
                         0
                         '(1 2 3 4))
                 10))

(run-tests)
